import time
from webbrowser import Error

import telebot
from pyexpat.errors import messages
from telebot import types
import backup
import pars_info



checker = False
token = '7475078721:AAHUczpsSz63r1AB736Yhz1ME5q8F7rpUhA'
bot = telebot.TeleBot(token)
students = []
adm = {}
adm_propusk = 0
hash1 = open('admin.txt', 'w')
hash1.write('admin ')
hash1.write(str(hash(' ')))
hash1.close()
with open('admin.txt') as file:
    for line in file:
        key, *value = line.split()
        adm[key] = value

pagesshop = 2
pagenow = 1
@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç')
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–£—á–∏—Ç–µ–ª—å")
    item2 = types.KeyboardButton("–£—á–µ–Ω–∏–∫")
    markup.add(item1, item2)
    bot.send_message(message.chat.id, '–ö—Ç–æ –≤—ã?', reply_markup=markup)


@bot.message_handler(content_types=['text'])
def cheak0(message):
    if message.text == '–£—á–µ–Ω–∏–∫':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        log = types.KeyboardButton("–í–æ–π—Ç–∏")
        reg = types.KeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
        back = types.KeyboardButton('–ù–∞–∑–∞–¥')
        markup.add(log, reg, back)
        bot.send_message(message.chat.id, '–í—Ö–æ–¥/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', reply_markup=markup)
        bot.register_next_step_handler(message, child)

    if message.text == '–£—á–∏—Ç–µ–ª—å':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        back = types.KeyboardButton('–ù–∞–∑–∞–¥')
        markup.add(back)
        bot.send_message(message.chat.id, '–õ–æ–≥–∏–Ω:', reply_markup=markup)
        bot.register_next_step_handler(message, cheak1)

    if message.text == '–ù–∞–∑–∞–¥':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("–£—á–∏—Ç–µ–ª—å")
        item2 = types.KeyboardButton("–£—á–µ–Ω–∏–∫")
        markup.add(item1, item2)
        bot.send_message(message.chat.id, '–ö—Ç–æ –≤—ã?', reply_markup=markup)




def cheak1(message):
    gan = True
    while gan == True:
        if message.text == '–ù–∞–∑–∞–¥':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("–£—á–∏—Ç–µ–ª—å")
            item2 = types.KeyboardButton("–£—á–µ–Ω–∏–∫")
            markup.add(item1, item2)
            bot.send_message(message.chat.id, '–ö—Ç–æ –≤—ã?', reply_markup=markup)
            gan = False
            break

        if message.text != 'admin':
            bot.send_message(message.chat.id, '–õ–æ–≥–∏–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π')
            bot.register_next_step_handler(message, cheak1)
            break

        else:
            gan = False
            bot.register_next_step_handler(message, admin_base_login)
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å')

def admin_base_login(message):
    gan = True
    string = ''.join(map(str, adm.get('admin')))
    while gan == True:
        if str(hash(message.text)) != string:
            bot.send_message(message.chat.id, '–ü–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π')
            bot.register_next_step_handler(message, admin_base_login)
            break
        else:
            gan = False
            bot.send_message(message.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, admin!')
            adm_propusk = 1
            print('–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω, admin, ' + str(message.chat.id))

def child(message):
    if message.text == '–ù–∞–∑–∞–¥':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("–£—á–∏—Ç–µ–ª—å")
        item2 = types.KeyboardButton("–£—á–µ–Ω–∏–∫")
        markup.add(item1, item2)
        bot.send_message(message.chat.id, '–ö—Ç–æ –≤—ã?', reply_markup=markup)
        bot.register_next_step_handler(message, cheak0)

    if message.text == '–í–æ–π—Ç–∏':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("–ù–∞–∑–∞–¥")
        markup.add(item1)
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n'
                                          '–õ–æ–≥–∏–Ω –ü–∞—Ä–æ–ª—å', reply_markup=markup)
        bot.register_next_step_handler(message, auth)
    if message.text== "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("–ù–∞–∑–∞–¥")
        markup.add(item1)
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n –§–ò–û(–≤–∞—à–µ –§–ò–û)/–õ–æ–≥–∏–Ω(–º–æ–∂–µ—Ç –±—ã—Ç—å –ª—é–±—ã–º)/–ö–ª–∞—Å—Å(–í–∞—à –∫–ª–∞—Å—Å)/–ü–∞—Ä–æ–ª—å(–ì–ª–∞–≤–Ω–æ–µ –∑–∞–ø–æ–º–Ω–∏—Ç–µ)', reply_markup=markup)
        bot.register_next_step_handler(message, register_child)


def auth(message):
    if message.text == '–ù–∞–∑–∞–¥':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("–í–æ–π—Ç–∏")
        item2 = types.KeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
        markup.add(item1, item2)
        bot.send_message(message.chat.id, '–í—Ö–æ–¥/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', reply_markup=markup)
        bot.register_next_step_handler(message, child)

    else:
        try:
            login, password = message.text.split()
            cheak = pars_info.cheaklogin(login)
            print(cheak)
            with open('students.txt') as file:
                for line in file:
                    key, value = line.split()
                    students.append(key and value)
                    if key == login and str(value) == password and cheak == True:
                        bot.send_message(message.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ' + login)
                        time.sleep(1)
                        global fiola
                        global log
                        global klassin
                        fiola = pars_info.cheakfio(key)
                        log = key
                        klassin = pars_info.cheakklass(key)

                        menu(message)

                        #, startapp
                    else:
                        print(login, password, key, value)
                        continue
        except Error:
            bot.send_message(message.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
            bot.register_next_step_handler(message, auth)  # , startapp




def register_child(message):
    if message.text == '–ù–∞–∑–∞–¥':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("–í–æ–π—Ç–∏")
        item2 = types.KeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
        item3 = types.KeyboardButton("–ù–∞–∑–∞–¥")
        markup.add(item1, item2, item3)
        bot.send_message(message.chat.id, '–í—Ö–æ–¥/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', reply_markup=markup)
        bot.register_next_step_handler(message, child)
    else:
        try:
            list = []
            exel = []
            fio, login, klass, password = message.text.split('/')
            list.append(fio)
            list.append(int(klass))
            list.append(False)
            if pars_info.cheaklogin(login) == False:
                if backup.cheakreg(list) == True:
                    a = open('students.txt', 'a')
                    exel.append(login)
                    exel.append(fio)
                    exel.append(klass)
                    global fiola
                    global log
                    global klassin
                    fiola = fio
                    log = login
                    klassin = klass
                    a.write("\n" + login + ' ' + password)
                    backup.register(exel)
                    #backup.cheakreg(fio, 0)
                    bot.send_message(message.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ' + login)
                    time.sleep(1)
                    menu(message)

                else:
                    bot.send_message(message.chat.id, '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã')
                    bot.register_next_step_handler(message, register_child)


            else:
                bot.send_message(message.chat.id, '–î–∞–Ω–Ω—ã–π –ª–æ–≥–∏–Ω —É–∂–µ –∑–∞–Ω—è—Ç, –≤—ã–±–µ—Ä–µ—Ç–µ –¥—Ä—É–≥–æ–π')
                bot.register_next_step_handler(message, register_child)


        except Error:
            bot.send_message(message.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
            bot.register_next_step_handler(message, register_child)  # , startapp



def menu(message):
    global pagenow
    global pagesshop
    markup = types.InlineKeyboardMarkup()
    magaz = types.InlineKeyboardButton("üíº–ú–∞–≥–∞–∑–∏–Ω", callback_data="magaz")
    minigame = types.InlineKeyboardButton("‚öΩÔ∏è–ú–∏–Ω–∏-–∏–≥—Ä—ã", callback_data="minigame")
    score = types.InlineKeyboardButton("üéñ–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="score")
    markup.add(magaz, minigame, score)
    bot.send_message(message.chat.id,"<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Ldod score!üòÅ</b>\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ —Ö–æ—Ä–æ—à–∏–µ –æ—Ç–º–µ—Ç–∫–∏..\n–ó–∞ –∫–∞–∂–¥—É—é —á–µ—Ç–≤–µ—Ä—Ç–Ω—É—é –æ—Ç–º–µ—Ç–∫—É –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –æ—á–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ –ø—Ä–∏–∑—ã –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–∞–≥–∞–∑–∏–Ω'üòå\n–¢–∞–∫–∂–µ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –Ω–∞–∫–æ–ø–∏—Ç—å –Ω–∞ –¥–∞–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã —Å –ø–æ–º–æ—â—å—é —Ä–∞–∑–¥–µ–ª–∞ '–ú–∏–Ω–∏-–∏–≥—Ä—ã'..\n–ò–≥—Ä–∞–π—Ç–µ, —Ä–∞–∑–≤–∏–≤–∞–π—Ç–µ—Å—å –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –ø—Ä–∏–∑—ãüòé", reply_markup=markup, parse_mode='HTML')
    bot.register_next_step_handler(message, answermenu)

@bot.callback_query_handler(func=lambda call: True)
def answermenu(call):
    global pagesshop
    global pagenow
    global chat_id
    global message_id
    global fiola
    global klassin
    global log
    message_id = call.message.message_id
    chat_id = call.message.chat.id
    if call.data == 'magaz':
        markup = types.InlineKeyboardMarkup()
        back = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back')
        t1 = types.InlineKeyboardButton(text="–¢–æ–≤–∞—Ä", callback_data='t1')
        markup.add(back, t1)
        textmagaz = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ωüíº\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–æ–±—Ä–µ—Å—Ç–∏ —Ç–æ–≤–∞—Ä—ã –∑–∞ –≤–∞—à–∏ –ø–æ–∏–Ω—Ç—ã.\n–í–∞—à–∏ –ø–æ–∏–Ω—Ç—ã:' #+ points
        bot.edit_message_text(textmagaz, reply_markup = markup, chat_id=call.message.chat.id, message_id=call.message.message_id)

    if call.data == 'back':
        bot.delete_message(call.message.chat.id, call.message.id)
        menu(call.message)

    if call.data == "t1":
        markup = types.InlineKeyboardMarkup()
        back = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back')
        markup.add(back)
        bot.edit_message_text("–¢–æ–≤–∞—Ä –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", reply_markup=markup, chat_id=chat_id, message_id=message_id)

    if call.data == 'minigame':
        markup = types.InlineKeyboardMarkup()
        back = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back')
        g1 = types.InlineKeyboardButton(text="–ö—Ä–µ—Å—Ç–∏–∫–∏ –Ω–æ–ª–∏–∫–∏", callback_data='g1')
        g2 = types.InlineKeyboardButton(text="4 –≤ —Ä—è–¥", callback_data='g2')
        g3 = types.InlineKeyboardButton(text="–ú–æ—Ä—Å–∫–æ–π –±–æ–π", callback_data='g3')
        markup.add(g1, g2, g3, back)
        textminigame = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ωüíº\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–æ–±—Ä–µ—Å—Ç–∏ —Ç–æ–≤–∞—Ä—ã –∑–∞ –≤–∞—à–∏ –ø–æ–∏–Ω—Ç—ã.\n–í–∞—à–∏ –ø–æ–∏–Ω—Ç—ã:'  # + points
        bot.edit_message_text(textminigame, reply_markup=markup, chat_id=call.message.chat.id, message_id=call.message.message_id)
    if call.data == 'g1':
        markup = types.InlineKeyboardMarkup()
        back = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back')
        lvl1 = types.InlineKeyboardButton(text="–õ–µ–≥–∫–∏–π", callback_data='lvl1')
        lvl2 = types.InlineKeyboardButton(text="–°—Ä–µ–¥–Ω–∏–π", callback_data='lvl2')
        lvl3 = types.InlineKeyboardButton(text="–¢—è–∂–µ–ª—ã–π", callback_data='lvl3')
        lvl4 = types.InlineKeyboardButton(text="–ù–µ–≤–æ–∑–º–æ–∂–Ω—ã–π", callback_data='lvl4')
        markup.add(lvl1, lvl2, lvl3, lvl4, back)
        bot.edit_message_text("<b>üéì–ò–ì–†–ê –ö–†–ï–°–¢–ò–ö–ò –ù–û–õ–ò–ö–òüéì</b>\n–ü—Ä–∞–≤–∏–ª–∞: –≤—ã –∏–≥—Ä–∞–µ—Ç–µ —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º, –≤–∞—à–∞ –∑–∞–¥–∞—á–∞ –æ–±—ã–≥—Ä–∞—Ç—å –µ–≥–æüòÅ\n–í —Å–ª—É—á–∞–µ –ø–æ–±–µ–¥—ã –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ"
                              "–≤–∞—à–∏ —Ç–æ–∫–µ–Ω—ã + –∫ —ç—Ç–æ–º—É –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ –∏–≥—Ä—É\n<b>–ò–≥—Ä–∞—Ç—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—Å–µ–≥–æ 5 —Ä–∞–∑ –≤ –¥–µ–Ω—å</b>\n\n<b>–õ–µ–≥–∫–∏–π</b>\n–í–∑–Ω–æ—Å –Ω–∞ –∏–≥—Ä—É:10—Ç–æ–∫–µ–Ω–æ–≤\n–í–æ–∑–º–æ–∂–Ω—ã–π –≤—ã–π–≥—Ä—ã—à:10 —Ç–æ–∫–µ–Ω–æ–≤\n"
                              "\n<b>–°—Ä–µ–¥–Ω–∏–π</b>\n–í–∑–Ω–æ—Å –Ω–∞ –∏–≥—Ä—É:15—Ç–æ–∫–µ–Ω–æ–≤\n–í–æ–∑–º–æ–∂–Ω—ã–π –≤—ã–π–≥—Ä—ã—à:15 —Ç–æ–∫–µ–Ω–æ–≤\n"
                              "\n<b>–¢—è–∂–µ–ª—ã–π</b>\n–í–∑–Ω–æ—Å –Ω–∞ –∏–≥—Ä—É:20—Ç–æ–∫–µ–Ω–æ–≤\n–í–æ–∑–º–æ–∂–Ω—ã–π –≤—ã–π–≥—Ä—ã—à:20 —Ç–æ–∫–µ–Ω–æ–≤\n"
                              "\n<b>–ù–µ–≤–æ–∑–º–æ–∂–Ω—ã–π</b>\n–í–∑–Ω–æ—Å –Ω–∞ –∏–≥—Ä—É:40—Ç–æ–∫–µ–Ω–æ–≤\n–í–æ–∑–º–æ–∂–Ω—ã–π –≤—ã–π–≥—Ä—ã—à:99999 —Ç–æ–∫–µ–Ω–æ–≤", reply_markup=markup, chat_id=chat_id, message_id=message_id, parse_mode='HTML')
    if call.data == 'score':
        markup = types.InlineKeyboardMarkup()
        back = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back')
        cheaktruth = types.InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤–∞—à–∏—Ö –ø–æ–∏–Ω—Ç–æ–≤", callback_data='cheaktruth')
        markup.add(cheaktruth, back)
        profile = f'<b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n–í–∞—à–µ —Ñ–∏–æ:<b>{fiola}</b>\n\n–í–∞—à –ª–æ–≥–∏–Ω:<b>{log}</b>\n\n–í–∞—à –∫–ª–∞—Å—Å:<b>{klassin}</b>\n\n–í–∞—à–∏ –ø–æ–∏–Ω—Ç—ã:n'  # + points
        bot.edit_message_text(profile, reply_markup=markup, chat_id=call.message.chat.id, message_id=call.message.message_id, parse_mode="HTML")




bot.infinity_polling()

